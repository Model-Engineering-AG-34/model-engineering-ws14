/**
 */
package forms.provider;

import forms.util.FormsAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class FormsItemProviderAdapterFactory extends FormsAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public FormsItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link forms.EntityModel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EntityModelItemProvider entityModelItemProvider;

	/**
	 * This creates an adapter for a {@link forms.EntityModel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEntityModelAdapter() {
		if (entityModelItemProvider == null) {
			entityModelItemProvider = new EntityModelItemProvider(this);
		}

		return entityModelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link forms.Entity} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EntityItemProvider entityItemProvider;

	/**
	 * This creates an adapter for a {@link forms.Entity}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEntityAdapter() {
		if (entityItemProvider == null) {
			entityItemProvider = new EntityItemProvider(this);
		}

		return entityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link forms.Attribute} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AttributeItemProvider attributeItemProvider;

	/**
	 * This creates an adapter for a {@link forms.Attribute}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAttributeAdapter() {
		if (attributeItemProvider == null) {
			attributeItemProvider = new AttributeItemProvider(this);
		}

		return attributeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link forms.EnumerationType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EnumerationTypeItemProvider enumerationTypeItemProvider;

	/**
	 * This creates an adapter for a {@link forms.EnumerationType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEnumerationTypeAdapter() {
		if (enumerationTypeItemProvider == null) {
			enumerationTypeItemProvider = new EnumerationTypeItemProvider(this);
		}

		return enumerationTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link forms.EnumerationLiteral} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EnumerationLiteralItemProvider enumerationLiteralItemProvider;

	/**
	 * This creates an adapter for a {@link forms.EnumerationLiteral}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEnumerationLiteralAdapter() {
		if (enumerationLiteralItemProvider == null) {
			enumerationLiteralItemProvider = new EnumerationLiteralItemProvider(this);
		}

		return enumerationLiteralItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link forms.Relationship} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RelationshipItemProvider relationshipItemProvider;

	/**
	 * This creates an adapter for a {@link forms.Relationship}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRelationshipAdapter() {
		if (relationshipItemProvider == null) {
			relationshipItemProvider = new RelationshipItemProvider(this);
		}

		return relationshipItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link forms.FormModel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FormModelItemProvider formModelItemProvider;

	/**
	 * This creates an adapter for a {@link forms.FormModel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFormModelAdapter() {
		if (formModelItemProvider == null) {
			formModelItemProvider = new FormModelItemProvider(this);
		}

		return formModelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link forms.Form} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FormItemProvider formItemProvider;

	/**
	 * This creates an adapter for a {@link forms.Form}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFormAdapter() {
		if (formItemProvider == null) {
			formItemProvider = new FormItemProvider(this);
		}

		return formItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link forms.Page} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PageItemProvider pageItemProvider;

	/**
	 * This creates an adapter for a {@link forms.Page}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPageAdapter() {
		if (pageItemProvider == null) {
			pageItemProvider = new PageItemProvider(this);
		}

		return pageItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link forms.TextFieldAttributePageElement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TextFieldAttributePageElementItemProvider textFieldAttributePageElementItemProvider;

	/**
	 * This creates an adapter for a {@link forms.TextFieldAttributePageElement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTextFieldAttributePageElementAdapter() {
		if (textFieldAttributePageElementItemProvider == null) {
			textFieldAttributePageElementItemProvider = new TextFieldAttributePageElementItemProvider(this);
		}

		return textFieldAttributePageElementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link forms.TextareaAttributePageElement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TextareaAttributePageElementItemProvider textareaAttributePageElementItemProvider;

	/**
	 * This creates an adapter for a {@link forms.TextareaAttributePageElement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTextareaAttributePageElementAdapter() {
		if (textareaAttributePageElementItemProvider == null) {
			textareaAttributePageElementItemProvider = new TextareaAttributePageElementItemProvider(this);
		}

		return textareaAttributePageElementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link forms.SelectionAttributePageElement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SelectionAttributePageElementItemProvider selectionAttributePageElementItemProvider;

	/**
	 * This creates an adapter for a {@link forms.SelectionAttributePageElement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSelectionAttributePageElementAdapter() {
		if (selectionAttributePageElementItemProvider == null) {
			selectionAttributePageElementItemProvider = new SelectionAttributePageElementItemProvider(this);
		}

		return selectionAttributePageElementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link forms.DateSelectionAttributePageElement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DateSelectionAttributePageElementItemProvider dateSelectionAttributePageElementItemProvider;

	/**
	 * This creates an adapter for a {@link forms.DateSelectionAttributePageElement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDateSelectionAttributePageElementAdapter() {
		if (dateSelectionAttributePageElementItemProvider == null) {
			dateSelectionAttributePageElementItemProvider = new DateSelectionAttributePageElementItemProvider(this);
		}

		return dateSelectionAttributePageElementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link forms.TimeSelectionAttributePageElement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TimeSelectionAttributePageElementItemProvider timeSelectionAttributePageElementItemProvider;

	/**
	 * This creates an adapter for a {@link forms.TimeSelectionAttributePageElement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTimeSelectionAttributePageElementAdapter() {
		if (timeSelectionAttributePageElementItemProvider == null) {
			timeSelectionAttributePageElementItemProvider = new TimeSelectionAttributePageElementItemProvider(this);
		}

		return timeSelectionAttributePageElementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link forms.ListRelationshipPageElement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ListRelationshipPageElementItemProvider listRelationshipPageElementItemProvider;

	/**
	 * This creates an adapter for a {@link forms.ListRelationshipPageElement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createListRelationshipPageElementAdapter() {
		if (listRelationshipPageElementItemProvider == null) {
			listRelationshipPageElementItemProvider = new ListRelationshipPageElementItemProvider(this);
		}

		return listRelationshipPageElementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link forms.TableRelationshipPageElement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TableRelationshipPageElementItemProvider tableRelationshipPageElementItemProvider;

	/**
	 * This creates an adapter for a {@link forms.TableRelationshipPageElement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTableRelationshipPageElementAdapter() {
		if (tableRelationshipPageElementItemProvider == null) {
			tableRelationshipPageElementItemProvider = new TableRelationshipPageElementItemProvider(this);
		}

		return tableRelationshipPageElementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link forms.Column} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ColumnItemProvider columnItemProvider;

	/**
	 * This creates an adapter for a {@link forms.Column}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createColumnAdapter() {
		if (columnItemProvider == null) {
			columnItemProvider = new ColumnItemProvider(this);
		}

		return columnItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link forms.AttributeValueCondition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AttributeValueConditionItemProvider attributeValueConditionItemProvider;

	/**
	 * This creates an adapter for a {@link forms.AttributeValueCondition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAttributeValueConditionAdapter() {
		if (attributeValueConditionItemProvider == null) {
			attributeValueConditionItemProvider = new AttributeValueConditionItemProvider(this);
		}

		return attributeValueConditionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link forms.CompositeCondition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CompositeConditionItemProvider compositeConditionItemProvider;

	/**
	 * This creates an adapter for a {@link forms.CompositeCondition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCompositeConditionAdapter() {
		if (compositeConditionItemProvider == null) {
			compositeConditionItemProvider = new CompositeConditionItemProvider(this);
		}

		return compositeConditionItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (entityModelItemProvider != null) entityModelItemProvider.dispose();
		if (entityItemProvider != null) entityItemProvider.dispose();
		if (attributeItemProvider != null) attributeItemProvider.dispose();
		if (enumerationTypeItemProvider != null) enumerationTypeItemProvider.dispose();
		if (enumerationLiteralItemProvider != null) enumerationLiteralItemProvider.dispose();
		if (relationshipItemProvider != null) relationshipItemProvider.dispose();
		if (formModelItemProvider != null) formModelItemProvider.dispose();
		if (formItemProvider != null) formItemProvider.dispose();
		if (pageItemProvider != null) pageItemProvider.dispose();
		if (textFieldAttributePageElementItemProvider != null) textFieldAttributePageElementItemProvider.dispose();
		if (textareaAttributePageElementItemProvider != null) textareaAttributePageElementItemProvider.dispose();
		if (selectionAttributePageElementItemProvider != null) selectionAttributePageElementItemProvider.dispose();
		if (dateSelectionAttributePageElementItemProvider != null) dateSelectionAttributePageElementItemProvider.dispose();
		if (timeSelectionAttributePageElementItemProvider != null) timeSelectionAttributePageElementItemProvider.dispose();
		if (listRelationshipPageElementItemProvider != null) listRelationshipPageElementItemProvider.dispose();
		if (tableRelationshipPageElementItemProvider != null) tableRelationshipPageElementItemProvider.dispose();
		if (columnItemProvider != null) columnItemProvider.dispose();
		if (attributeValueConditionItemProvider != null) attributeValueConditionItemProvider.dispose();
		if (compositeConditionItemProvider != null) compositeConditionItemProvider.dispose();
	}

}
