// automatically generated by Xtext
grammar at.ac.tuwien.big.forms.entity.Entity with org.eclipse.xtext.common.Terminals

import "http://www.big.tuwien.ac.at/forms" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

// implement your grammar here, starting with the root element: EntityModel

EntityModel :
	(entityModelElements+=EntityModelElement)*
;
EntityModelElement :
	Entity|Enumeration
;
Entity :
	'entity' name=ID ('extends' superType=[Entity])?
	'{'
	
		'id' id=[Attribute|QualifiedName]','
		
		(features+=Feature)*	
		
	'}'
;
Feature:
	Attribute|Relationship
;
Attribute :
	'attribute' name=ID(mandatory?='*')? ':' type=AttributeType (':' enumeration=[Enumeration])?(',')? 
;
Relationship :
	'reference' name=ID ':' target=[Entity]'['lowerBound=EInt'..'upperBound=EInt']' ('opposite-of' opposite=[Relationship|QualifiedName])?(',')?
;
Enumeration :
	'enum' name=ID 
	'{'
		(literals+=Literal)+ 		
	'}'
;

Literal :
	name=ID '=' value=EString(',')?
;

enum AttributeType :
	String='String'|Integer='Integer'|Year='Year'|Date='Date'|None='None'|Email='Email'|Boolean='Boolean'|Time='Time'|Text='Text'
;

EInt returns ecore::EInt:
	'-'? INT;
	
EString returns ecore::EString:
	STRING;
	
QualifiedName returns ecore::EString: 
	ID (=> '.'ID)*;