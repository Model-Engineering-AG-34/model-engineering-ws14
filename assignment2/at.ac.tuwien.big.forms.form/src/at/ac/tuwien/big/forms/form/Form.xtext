// automatically generated by Xtext
grammar at.ac.tuwien.big.forms.form.Form with org.eclipse.xtext.common.Terminals

import "http://www.big.tuwien.ac.at/forms" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

// implement your grammar here, starting with the root element: FormModel

FormModel: 
	(forms+=Form)*
;

Form:
	(welcomeForm?='welcome')? 'form' name=ID title=EString ('('description=EString')')? 'handles' entity=[Entity]
	'{'
		 (pages+=Page)*
	'}'
;

Page:
	'page' title=EString 
	'{'
		(pageElements+=PageElement)* 
	'}' ('with' condition=Condition)?
		
;
PageElement:
	(AttributePageElement|RelationshipPageElement) ('with' condition=Condition)?
;
AttributePageElement:
	TextField|TextArea|SelectionField|DateSelectionField|TimeSelectionField
;
RelationshipPageElement:
	List|Table
;
Condition:
	AttributeValueCondition|CompositeCondition
;


AttributeValueCondition:
	'attribute-condition' conditionID=ID':' attribute=[Attribute|QualifiedName] '==' value=EString '?' type=ConditionType
;
CompositeCondition:
	'composite-condition' conditionID=ID':' 
	'(' composedConditions+=Condition compositionType=CompositeConditionType composedConditions+=Condition')' '?' type=ConditionType
;
enum CompositeConditionType:
	And='and'|Or='or'
;
enum ConditionType :
	Hide='Hide'|Show='Show'|Enable='Enable'|Disable='Disable'|None='None'
;
TextField:
	'text-field' elementID=ID label=EString ('format' format=EString)? 'handles' attribute=[Attribute|QualifiedName](',')? 
;

TextArea:
	'text-area' elementID=ID label=EString 'handles' attribute=[Attribute|QualifiedName](',')? 
;

SelectionField:
	'selection-field' elementID=ID label=EString 'handles' attribute=[Attribute|QualifiedName](',')? 
;

DateSelectionField:
	'date-selection-field' elementID=ID label=EString 'handles' attribute=[Attribute|QualifiedName](',')? 
;
TimeSelectionField:
	'time-selection-field' elementID=ID label=EString 'handles' attribute=[Attribute|QualifiedName](',')?
;
Table:
	'table' elementID=ID label=EString 'handles' relationship=[Relationship|QualifiedName]
	'{'
		(columns+=Column)*
	'}' 'edits' editingForm=[Form] (',')?
;

Column:
	'column' elementID=ID label=EString 'handles' attribute=[Attribute|QualifiedName](',')?
;

List:
	'list' elementID=ID label=EString 'handles' relationship=[Relationship|QualifiedName] 'edits' editingForm=[Form](',')?
;
EInt returns ecore::EInt:
	'-'? INT;
	
EString returns ecore::EString:
	STRING;

QualifiedName returns ecore::EString: 
	ID (=> '.'ID)*;