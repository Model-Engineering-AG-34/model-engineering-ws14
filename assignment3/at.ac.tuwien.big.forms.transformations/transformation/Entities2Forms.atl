-- @path Forms=/at.ac.tuwien.big.forms.transformations/metamodel/forms.ecore

module Entities2Forms;
create OUT : Forms from IN : Forms;

helper def: welcomeFormIsSet : Boolean = false;
helper def: id : Integer = 0;

helper context Integer def: inc() : Integer = self + 1;
helper context Forms!Entity def : allAttributesRec() : Sequence(Forms!Attribute) =
	self.features -> select( p | p.oclIsTypeOf(Forms!Attribute))
	-> union(
		if not self.superType.oclIsUndefined()
			then self.superType.allAttributesRec()
			else Sequence{}
		endif
	); 
helper context Forms!Entity def : allRelationshipsRec() : Sequence(Forms!Relationship) =
	self.features -> select( p | p.oclIsTypeOf(Forms!Relationship))
	-> union(
		if not self.superType.oclIsUndefined()
			then self.superType.allRelationshipsRec()
			else Sequence{}
		endif
	); 

rule EntityModel2FormModel {
	from
		em : Forms!EntityModel
	to 
		fm : Forms!FormModel (
			forms <- em.entityModelElements
		)
}
 
rule Entity2Form {
	from
		e : Forms!Entity
	to 
		f : Forms!Form (
			name <- e.name,
			title <- e.name,
			pages <- page,
			pages <- e.allRelationshipsRec()
		),
		page : Forms!Page(
			title <- e.name + ' Details',
			pageElements <- e.allAttributesRec() -> collect(attr | thisModule.Attribute2AttributePageElement(attr))
		)
		
	do {
		f.entity <- e;
		
		if (thisModule.welcomeFormIsSet = false) {
			f.welcomeForm <- Forms!Entity.allInstances() 
				-> collect(f | f.features).flatten()
				-> select(t | t.oclIsTypeOf(Forms!Relationship))
				-> collect(r | r.target)
				-> excludes(e);
			
			if (f.welcomeForm){
				thisModule.welcomeFormIsSet <- true;
			}
		} else {
			f.welcomeForm <- false;
		}
	}
		
}
lazy abstract rule Attribute2AttributePageElement {
	from
		attr : Forms!Attribute
	to
		ape : Forms!AttributePageElement(
			label <- attr.name.substring(1, 1).toUpper() + 
				if attr.name.size() > 1
				then attr.name.substring(2, attr.name.size())
				else ''
				endif
		)
}
rule Relationship2PageList {  
	from
		r : Forms!Relationship
	to 
		p : Forms!Page(
			pageElements <- pe,
			title <- 
				r.name.substring(1, 1).toUpper() +
				if r.name.size() > 1
				then r.name.substring(2, r.name.size())
				else ''
				endif
		),
		pe : Forms!List(
			editingForm <- Forms!Form.allInstances() -> select(f | f.entity = r.target),
			label <- Forms!Form.allInstances() -> select(f | f.entity = r.target).first().name
		)
		
	do {
		pe.relationship <- r;
		thisModule.id <- thisModule.id.inc();
		pe.elementID <- thisModule.id.toString();
	}
}

lazy rule AttributePageElement2TimeSelectionField extends Attribute2AttributePageElement {
	from
		attr : Forms!Attribute (
			attr.type = #Time
		)
	to
		ape : Forms!TimeSelectionField()
		
	do {
		ape.attribute <- attr;
		thisModule.id <- thisModule.id.inc();
		ape.elementID <- thisModule.id.toString();
	}
}
lazy rule AttributePageElement2DateSelectionField extends Attribute2AttributePageElement {
	from
		attr : Forms!Attribute (
			attr.type = #Date
		)
	to
		ape : Forms!DateSelectionField()
		
	do {
		ape.attribute <- attr;
		thisModule.id <- thisModule.id.inc();
		ape.elementID <- thisModule.id.toString();
	}
}
lazy rule AttributePageElement2TextArea extends Attribute2AttributePageElement {
	from
		attr : Forms!Attribute (
			attr.type = #Text
		)
	to
		ape : Forms!TextArea()
		
	do {
		ape.attribute <- attr;
		thisModule.id <- thisModule.id.inc();
		ape.elementID <- thisModule.id.toString();
	}
}
lazy rule AttributePageElement2SelectionField extends Attribute2AttributePageElement {
	from
		attr : Forms!Attribute (
			attr.type = #"Boolean" or attr.type = #None
		)
	to
		ape : Forms!SelectionField()
		
	do {
		ape.attribute <- attr;
		thisModule.id <- thisModule.id.inc();
		ape.elementID <- thisModule.id.toString();
	}
}
lazy rule AttributePageElement2TextFieldString extends Attribute2AttributePageElement {
	from
		attr : Forms!Attribute (
			attr.type = #"String"
		)
	to
		ape : Forms!TextField()
		
	do {
		ape.attribute <- attr;
		thisModule.id <- thisModule.id.inc();
		ape.elementID <- thisModule.id.toString();
	}
}
lazy rule AttributePageElement2TextFieldNumeric extends Attribute2AttributePageElement {
	from
		attr : Forms!Attribute (
			attr.type = #Year or attr.type = #"Integer"
		)
	to
		ape : Forms!TextField(
			format <- '^[0-9]+$'
		)
		
	do {
		ape.attribute <- attr;
		thisModule.id <- thisModule.id.inc();
		ape.elementID <- thisModule.id.toString();
	}
}
lazy rule AttributePageElement2TextFieldEmail extends Attribute2AttributePageElement {
	from
		attr : Forms!Attribute (
			attr.type = #Email
		)
	to
		ape : Forms!TextField(
			format <- '^\\w+@[a-zA-Z_]+\\.[a-zA-Z]{2,3}$'
		)
		
	do {
		ape.attribute <- attr;
		thisModule.id <- thisModule.id.inc();
		ape.elementID <- thisModule.id.toString();
	}
}





