-- @path Forms=/at.ac.tuwien.big.forms.transformations/metamodel/forms.ecore

module Entities2Forms;
create OUT : Forms from IN : Forms;
helper def: welcomeFormisSet : Boolean =false;
helper def: id : Integer =0;
helper context Integer def: inc() : Integer=self+1;
helper context Forms!Entity
def : allAttributesRec() :Sequence(Forms!Attribute) =
self.features->select(p|p.oclIsTypeOf(Forms!Attribute))
->union(
	if not self.superType.oclIsUndefined()
	then self.superType.allAttributesRec()
	else Sequence{}
	endif
	); 

rule EntityModel2FormModel {
	from
		em : Forms!EntityModel
	to 
		fm : Forms!FormModel (
			forms <- em.entityModelElements
		)
}
 
rule Entity2Form {
	from
		en : Forms!Entity
	to 
		fm : Forms!Form (
			name <- en.name,
			title <- en.name,
			pages <- pg,
			pages <- en.features ->select(p|p.oclIsTypeOf(Forms!Relationship))

			
		),
		pg:Forms!Page(
			title <- en.name + ' Details'
			
			
			
		)
	do{
		fm.entity <- en;
		
		
		for(a in en.allAttributesRec())
		{
			pg.pageElements <-thisModule.Attribute2AttributePageElement(a);
		}
		
		if (thisModule.welcomeFormisSet=false) {
			fm.welcomeForm <- Forms!Entity.allInstances()->collect(f|f.features).flatten()->select(t|t.oclIsTypeOf(Forms!Relationship))->collect(r|r.target)->excludes(en);
			
			if(fm.welcomeForm){
				thisModule.welcomeFormisSet <- true;
			}
		} else {
			fm.welcomeForm <-false;
		}
		
		

		
	}
		
}
lazy abstract rule Attribute2AttributePageElement{
	from
		at: Forms!Attribute
	to
		ape: Forms!AttributePageElement(
			label<-at.name.substring(1, 1).toUpper()+at.name.substring(2, at.name.size()))
	
}
rule Relationship2PageList {  
	from
		fe : Forms!Relationship
	to 
		pg:Forms!Page(
			title <- fe.name.substring(1, 1).toUpper()+fe.name.substring(2, fe.name.size()) ,
			pageElements <- pe
			
			
		),
		pe : Forms!List(
			editingForm<-Forms!Form.allInstances()->select(fo|fo.entity=fe.target),
			label <- Forms!Form.allInstances()->select(fo|fo.entity=fe.target).first().name)
		
	do{
		
		pe.relationship<-fe;
		thisModule.id<-thisModule.id.inc();
		pe.elementID<-thisModule.id.toString();
	}
}

lazy rule AttributePageElement2TimeSelectionField extends Attribute2AttributePageElement{
	from
		at: Forms!Attribute (at.type=#Time)
	to
		ape: Forms!TimeSelectionField()
		
	do{
		ape.attribute<-at;
		thisModule.id<-thisModule.id.inc();
		ape.elementID<-thisModule.id.toString();
	}
}
lazy rule AttributePageElement2DateSelectionField extends Attribute2AttributePageElement{
	from
		at: Forms!Attribute (at.type=#Date)
	to
		ape: Forms!DateSelectionField()
		
	do{
		ape.attribute<-at;
		thisModule.id<-thisModule.id.inc();
		ape.elementID<-thisModule.id.toString();
	}
}
lazy rule AttributePageElement2TextArea extends Attribute2AttributePageElement{
	from
		at: Forms!Attribute (at.type=#Text)
	to
		ape: Forms!TextArea()
		
	do{
		ape.attribute<-at;
		thisModule.id<-thisModule.id.inc();
		ape.elementID<-thisModule.id.toString();
	}
}
lazy rule AttributePageElement2SelectionField extends Attribute2AttributePageElement{
	from
		at: Forms!Attribute (at.type=#"Boolean" or at.type=#None)
	to
		ape: Forms!SelectionField()
		
	do{
		ape.attribute<-at;
		thisModule.id<-thisModule.id.inc();
		ape.elementID<-thisModule.id.toString();
	}
}
lazy rule AttributePageElement2TextFieldString extends Attribute2AttributePageElement{
	from
		at: Forms!Attribute (at.type=#"String")
	to
		ape: Forms!TextField()
		
	do{
		ape.attribute<-at;
		thisModule.id<-thisModule.id.inc();
		ape.elementID<-thisModule.id.toString();
	}
}
lazy rule AttributePageElement2TextFieldNumeric extends Attribute2AttributePageElement{
	from
		at: Forms!Attribute (at.type=#Year or at.type=#"Integer")
	to
		ape: Forms!TextField(
			format<-'^[0-9]+$')
		
	do{
		ape.attribute<-at;
		thisModule.id<-thisModule.id.inc();
		ape.elementID<-thisModule.id.toString();
	}
}
lazy rule AttributePageElement2TextFieldEmail extends Attribute2AttributePageElement{
	from
		at: Forms!Attribute (at.type=#Email)
	to
		ape: Forms!TextField(
			format<-'^\\w+@[a-zA-Z_]+\\.[a-zA-Z]{2,3}$')  
		
	do{
		ape.attribute<-at;
		thisModule.id<-thisModule.id.inc();
		ape.elementID<-thisModule.id.toString();
	}
}





